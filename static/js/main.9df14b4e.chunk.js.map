{"version":3,"sources":["components/common/LineChart/LineChart.js","apis/Urls.js","components/screens/MainScreen/MainScreen.js","utils/cadFormatter.js","apis/Rates/Rates.js","apis/Transactions/Transactions.js","components/screens/WelcomeScreen/WelcomeScreen.js","routes/RootRoutes.js","components/MainAppContainer/MainAppContainer.js","App.js","serviceWorker.js","index.js","components/screens/MainScreen/MainScreen.module.css","components/screens/WelcomeScreen/WelcomeScreen.module.css","assets/logo.png"],"names":["LineChart","props","data","options","width","height","TRANSACTION_HISTORY","emptyDataMax","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","legend","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","MainScreen","amt","useState","cadToBtcRatesHistory","setCadToBtcRatesHistory","transactionHistory","setTransactionHistory","dataMax","setDataMax","netWorth","setNetWorth","useEffect","callback","errorCallback","axios","get","then","result","catch","error","getCadToBtcRatesHistory","getCadToEthRatesHistory","cadToEthRatesHistory","currCadToBtcI","currCadToEthI","currCadToBtcRate","currCadToEthRate","getTransactionHistory","sort","a","b","Date","createdAt","currNetWorth","cadAmt","btcAmt","ethAmt","newData","map","transaction","transactionDate","length","midMarketRate","direction","currency","amount","type","from","to","x","y","toLocaleString","console","Container","Grid","container","justify","alignItems","spacing","className","styles","root","item","CircularProgress","Typography","variant","underlineText","Intl","NumberFormat","style","format","scales","xAxes","time","displayFormats","quarter","WelcomeScreen","history","useHistory","src","logo","alt","Button","onClick","push","RootRouter","exact","path","MainAppContainer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.9df14b4e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst LineChart = (props) => {\r\n  return (\r\n    <Line\r\n      data={props.data}\r\n      options={props.options}\r\n      width={props.width}\r\n      height={props.height}\r\n    />\r\n  );\r\n};\r\n\r\nexport default LineChart;\r\n","export const CURRENT_RATES = 'https://api.shakepay.co/rates';\r\nexport const CAD_TO_BTC_RATES_HISTORY = 'https://shakepay.github.io/programming-exercise/web/rates_CAD_BTC.json';\r\nexport const CAD_TO_ETH_RATES_HISTORY = 'https://shakepay.github.io/programming-exercise/web/rates_CAD_ETH.json';\r\n\r\nexport const TRANSACTION_HISTORY = 'https://shakepay.github.io/programming-exercise/web/transaction_history.json';","import React, { useEffect, useState } from 'react';\r\nimport styles from './MainScreen.module.css';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Container from '@material-ui/core/Container';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { cadFormatter } from '../../../utils/cadFormatter';\r\nimport LineChart from '../../common/LineChart/LineChart';\r\nimport { getTransactionHistory } from '../../../apis/Transactions/Transactions';\r\nimport {\r\n  getCadToBtcRatesHistory,\r\n  getCadToEthRatesHistory,\r\n} from '../../../apis/Rates/Rates';\r\n\r\nconst emptyDataMax = {\r\n  labels: [],\r\n  datasets: [\r\n    {\r\n      label: 'CAD',\r\n      fill: false,\r\n      lineTension: 0.1,\r\n      backgroundColor: 'rgba(75,192,192,0.4)',\r\n      borderColor: 'rgba(75,192,192,1)',\r\n      borderCapStyle: 'butt',\r\n      borderDash: [],\r\n      borderDashOffset: 0.0,\r\n      borderJoinStyle: 'miter',\r\n      legend: 'CAD',\r\n      pointBorderColor: 'rgba(75,192,192,1)',\r\n      pointBackgroundColor: '#fff',\r\n      pointBorderWidth: 1,\r\n      pointHoverRadius: 5,\r\n      pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n      pointHoverBorderWidth: 2,\r\n      pointRadius: 1,\r\n      pointHitRadius: 10,\r\n      data: [],\r\n    },\r\n  ],\r\n};\r\n\r\nconst MainScreen = () => {\r\n  const [cadToBtcRatesHistory, setCadToBtcRatesHistory] = useState(null);\r\n  const [transactionHistory, setTransactionHistory] = useState(null);\r\n  const [dataMax, setDataMax] = useState(emptyDataMax);\r\n  const [netWorth, setNetWorth] = useState(0);\r\n\r\n  useEffect(() => {\r\n    getCadToBtcRatesHistory(\r\n      (cadToBtcRatesHistory) => {\r\n        setCadToBtcRatesHistory(cadToBtcRatesHistory);\r\n        getCadToEthRatesHistory((cadToEthRatesHistory) => {\r\n          let currCadToBtcI = 0;\r\n          let currCadToEthI = 0;\r\n          let currCadToBtcRate = 0;\r\n          let currCadToEthRate = 0;\r\n\r\n          getTransactionHistory(\r\n            (transactionHistory) => {\r\n              transactionHistory.sort(\r\n                (a, b) => new Date(a.createdAt) - new Date(b.createdAt)\r\n              );\r\n              cadToBtcRatesHistory.sort(\r\n                (a, b) => new Date(a.createdAt) - new Date(b.createdAt)\r\n              );\r\n              cadToEthRatesHistory.sort(\r\n                (a, b) => new Date(a.createdAt) - new Date(b.createdAt)\r\n              );\r\n\r\n              setTransactionHistory(transactionHistory);\r\n\r\n              let currNetWorth = 0;\r\n              let cadAmt = 0;\r\n              let btcAmt = 0;\r\n              let ethAmt = 0;\r\n              let newData = transactionHistory.map((transaction) => {\r\n                let transactionDate = new Date(transaction.createdAt);\r\n                while (\r\n                  currCadToBtcI < cadToBtcRatesHistory.length &&\r\n                  transactionDate >=\r\n                    new Date(cadToBtcRatesHistory[currCadToBtcI].createdAt)\r\n                ) {\r\n                  currCadToBtcRate =\r\n                    cadToBtcRatesHistory[currCadToBtcI].midMarketRate;\r\n                  currCadToBtcI++;\r\n                }\r\n\r\n                while (\r\n                  currCadToEthI < cadToEthRatesHistory.length &&\r\n                  transactionDate >=\r\n                    new Date(cadToEthRatesHistory[currCadToEthI].createdAt)\r\n                ) {\r\n                  currCadToEthRate =\r\n                    cadToEthRatesHistory[currCadToEthI].midMarketRate;\r\n                  currCadToEthI++;\r\n                }\r\n\r\n                if (transaction.direction === 'credit') {\r\n                  if (transaction.currency === 'CAD') {\r\n                    cadAmt += transaction.amount;\r\n                  } else if (transaction.currency === 'BTC') {\r\n                    btcAmt += transaction.amount;\r\n                  } else if (transaction.currency === 'ETH') {\r\n                    ethAmt += transaction.amount;\r\n                  }\r\n                } else if (transaction.direction === 'debit') {\r\n                  if (transaction.currency === 'CAD') {\r\n                    cadAmt -= transaction.amount;\r\n                  } else if (transaction.currency === 'BTC') {\r\n                    btcAmt -= transaction.amount;\r\n                  } else if (transaction.currency === 'ETH') {\r\n                    ethAmt -= transaction.amount;\r\n                  }\r\n                } else if (transaction.type === 'conversion') {\r\n                  if (\r\n                    transaction.from.currency === 'CAD' &&\r\n                    transaction.to.currency === 'BTC'\r\n                  ) {\r\n                    cadAmt -= transaction.from.amount;\r\n                    btcAmt += transaction.to.amount;\r\n                  } else if (\r\n                    transaction.from.currency === 'CAD' &&\r\n                    transaction.to.currency === 'ETH'\r\n                  ) {\r\n                    cadAmt -= transaction.from.amount;\r\n                    ethAmt += transaction.to.amount;\r\n                  } else if (\r\n                    transaction.from.currency === 'BTC' &&\r\n                    transaction.to.currency === 'CAD'\r\n                  ) {\r\n                    btcAmt -= transaction.from.amount;\r\n                    cadAmt += transaction.to.amount;\r\n                  } else if (\r\n                    transaction.from.currency === 'ETH' &&\r\n                    transaction.to.currency === 'CAD'\r\n                  ) {\r\n                    ethAmt -= transaction.from.amount;\r\n                    cadAmt += transaction.to.amount;\r\n                  }\r\n                }\r\n\r\n                currNetWorth =\r\n                  cadAmt +\r\n                  btcAmt * currCadToBtcRate +\r\n                  ethAmt * currCadToEthRate;\r\n\r\n                return {\r\n                  x: new Date(transaction.createdAt),\r\n                  y: currNetWorth,\r\n                };\r\n              });\r\n\r\n              setDataMax({\r\n                ...dataMax,\r\n                labels: transactionHistory.map((transaction) =>\r\n                  new Date(transaction.createdAt).toLocaleString()\r\n                ),\r\n                datasets: [\r\n                  {\r\n                    ...dataMax.datasets[0],\r\n                    data: newData,\r\n                  },\r\n                ],\r\n              });\r\n              setNetWorth(currNetWorth);\r\n            },\r\n            (error) => {\r\n              console.error('Transaction History', error);\r\n            }\r\n          );\r\n        });\r\n      },\r\n      (error) => {\r\n        console.error('Cad To Btc Rates History', error);\r\n      }\r\n    );\r\n  }, []);\r\n\r\n  return (\r\n    <Container>\r\n      <Grid\r\n        container\r\n        direction='column'\r\n        justify='center'\r\n        alignItems='center'\r\n        spacing={4}\r\n        className={styles.root}\r\n      >\r\n        {cadToBtcRatesHistory === null || transactionHistory === null ? (\r\n          <Grid item>\r\n            <CircularProgress />\r\n          </Grid>\r\n        ) : (\r\n          <>\r\n            <Grid item>\r\n              <Typography variant='h3' className={styles.underlineText}>\r\n                Personal Net Worth\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <Typography variant='h4'>{cadFormatter(netWorth)}</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <LineChart\r\n                data={dataMax}\r\n                options={{\r\n                  scales: {\r\n                    xAxes: [\r\n                      {\r\n                        type: 'time',\r\n                        time: {\r\n                          displayFormats: {\r\n                            quarter: 'MMM YYYY',\r\n                          },\r\n                        },\r\n                      },\r\n                    ],\r\n                  },\r\n                }}\r\n                width={900}\r\n                height={550}\r\n              />\r\n            </Grid>\r\n          </>\r\n        )}\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default MainScreen;\r\n","export const cadFormatter = (amt) =>\r\n  new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'CAD',\r\n  }).format(amt);\r\n","import axios from 'axios';\r\nimport { CURRENT_RATES, CAD_TO_BTC_RATES_HISTORY, CAD_TO_ETH_RATES_HISTORY } from '../Urls';\r\n\r\nexport const getCurrentRates = (\r\n  callback = () => {},\r\n  errorCallback = () => {}\r\n) => {\r\n  axios\r\n    .get(CURRENT_RATES)\r\n    .then((result) => {\r\n      callback(result.data);\r\n    })\r\n    .catch((error) => {\r\n      errorCallback(error);\r\n    });\r\n};\r\n\r\nexport const getCadToBtcRatesHistory = (\r\n  callback = () => {},\r\n  errorCallback = () => {}\r\n) => {\r\n  axios\r\n    .get(CAD_TO_BTC_RATES_HISTORY)\r\n    .then((result) => {\r\n      callback(result.data);\r\n    })\r\n    .catch((error) => {\r\n      errorCallback(error);\r\n    });\r\n};\r\n\r\nexport const getCadToEthRatesHistory = (\r\n  callback = () => {},\r\n  errorCallback = () => {}\r\n) => {\r\n  axios\r\n    .get(CAD_TO_ETH_RATES_HISTORY)\r\n    .then((result) => {\r\n      callback(result.data);\r\n    })\r\n    .catch((error) => {\r\n      errorCallback(error);\r\n    });\r\n};\r\n","import axios from 'axios';\r\nimport { TRANSACTION_HISTORY } from '../Urls';\r\n\r\nexport const getTransactionHistory = (\r\n  callback = () => {},\r\n  errorCallback = () => {}\r\n) => {\r\n  axios\r\n    .get(TRANSACTION_HISTORY)\r\n    .then((result) => {\r\n      callback(result.data);\r\n    })\r\n    .catch((error) => {\r\n      errorCallback(error);\r\n    });\r\n};\r\n","import React from 'react';\r\nimport styles from './WelcomeScreen.module.css';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Container from '@material-ui/core/Container';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport { useHistory } from 'react-router-dom';\r\nimport logo from '../../../assets/logo.png';\r\n\r\nconst WelcomeScreen = () => {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <Container>\r\n      <Grid\r\n        container\r\n        direction='column'\r\n        justify='center'\r\n        alignItems='center'\r\n        spacing={10}\r\n        className={styles.root}\r\n      >\r\n        <Grid item>\r\n          <img src={logo} alt='Girl in a jacket' width='300' height='300' />\r\n        </Grid>\r\n        <Grid item>\r\n          <Button\r\n            variant='outlined'\r\n            onClick={() => {\r\n              history.push('/net-worth');\r\n            }}\r\n          >\r\n            <Typography variant='h4'>View net worth</Typography>\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default WelcomeScreen;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport MainScreen from '../components/screens/MainScreen/MainScreen';\r\nimport WelcomeScreen from '../components/screens/WelcomeScreen/WelcomeScreen';\r\n\r\n\r\nconst RootRouter = () => {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <Switch>\r\n          <Route exact path='/'>\r\n          <WelcomeScreen />\r\n          </Route>\r\n          <Route path='/net-worth'>\r\n            <MainScreen />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default RootRouter;\r\n","import React from 'react';\r\nimport RootRouter from '../../routes/RootRoutes';\r\n\r\nconst MainAppContainer = () => {\r\n  return <RootRouter />;\r\n};\r\n\r\nexport default MainAppContainer;\r\n","import React from 'react';\r\nimport 'fontsource-roboto';\r\n\r\nimport './App.css';\r\nimport MainAppContainer from './components/MainAppContainer/MainAppContainer';\r\n\r\nconst App = () => {\r\n  return <MainAppContainer />;\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"MainScreen_root__1m32u\",\"underlineText\":\"MainScreen_underlineText__2vM4_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"WelcomeScreen_root__q-Tkg\"};","module.exports = __webpack_public_path__ + \"static/media/logo.c2468d46.png\";"],"sourceRoot":""}